// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/plog"
	"go.opentelemetry.io/collector/receiver"
	conventions "go.opentelemetry.io/collector/semconv/v1.9.0"
)

// LogsBuilder provides an interface for scrapers to report logs while taking care of all the transformations
// required to produce log representation defined in metadata and user config.
type LogsBuilder struct {
	config     LogsBuilderConfig // config of the metrics builder.
	logsBuffer plog.Logs
	buildInfo  component.BuildInfo // contains version information.
}

// LogBuilderOption applies changes to default metrics builder.
type LogBuilderOption interface {
	apply(*LogsBuilder)
}

type logBuilderOptionFunc func(mb *LogsBuilder)

func (mbof logBuilderOptionFunc) apply(mb *LogsBuilder) {
	mbof(mb)
}
func NewLogsBuilder(lbc LogsBuilderConfig, settings receiver.Settings, options ...LogBuilderOption) *LogsBuilder {
	mb := &LogsBuilder{
		config:     lbc,
		logsBuffer: plog.NewLogs(),
		buildInfo:  settings.BuildInfo,
	}
	return mb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *LogsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(ResourceAttributesConfig{})
}

// ResourceLogsOption applies changes to provided resource metrics.
type ResourceLogsOption interface {
	apply(plog.ResourceLogs)
}

type resourceLogsOptionFunc func(plog.ResourceLogs)

func (rmof resourceLogsOptionFunc) apply(rm plog.ResourceLogs) {
	rmof(rm)
}

// WithLogsResource sets the provided resource on the emitted ResourceLogs.
// It's recommended to use ResourceBuilder to create the resource.
func WithLogsResource(res pcommon.Resource) ResourceLogsOption {
	return resourceLogsOptionFunc(func(rm plog.ResourceLogs) {
		res.CopyTo(rm.Resource())
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceLogsOption arguments.
func (mb *LogsBuilder) EmitForResource(options ...ResourceLogsOption) {
	rm := plog.NewResourceLogs()
	rm.SetSchemaUrl(conventions.SchemaURL)
	ils := rm.ScopeLogs().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)

	for _, op := range options {
		op.apply(rm)
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *LogsBuilder) Emit(options ...ResourceLogsOption) plog.Logs {
	mb.EmitForResource(options...)
	logs := mb.logsBuffer
	mb.logsBuffer = plog.NewLogs()
	return logs
}
